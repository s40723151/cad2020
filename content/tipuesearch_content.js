var tipuesearch = {"pages": [{'title': 'About', 'text': '這裡是國立虎尾科技大學機械設計工程系大二的電腦輔助設計實習課程網頁.. \n 何謂電腦輔助(機械)設計實習? \n 電腦其實只擅長兩件事, 能夠高速計算, 並且儲存各階段計算所得到的結果. \n 輔助指從旁支撐協助, 藉以提升主體功能. \n 設計是一種安排, 而且應該是竭盡全力, 希望達到盡善盡美的一種安排. \n 機械是一種器物, 而且是各零組件精巧配置運行下, 可以達成特定任務, 發揮設計功能的一種器物. \n 實習包括實驗與練習, 實驗是實際體驗, 而練習則是透過重複操作進行學習. \n 所以該如定義電腦輔助設計實習? \n 課程設計理念 \n 我們為何需要自行設法建構電腦輔助設計系統或系統中的關鍵工具? (為何不直接使用封閉套件, 然後將電腦輔助設計當作電腦輔助繪圖課程來上就好?) \n 我們為何需要利用雲端系統長期保存自己的學習與設計歷程? (為何不直接採用網路硬碟, 把每天的進度檔案用個別目錄分別儲存就好?) \n 我們為何要用程式方法與最佳化設計提升產品開發流程的效能? (為何不直接利用人工的方式進行產品重複設計的資料修改就好?反正台灣薪資低, 人工很好用?) \n 我們為何需要能在任何一台電腦上迅速完成電腦輔助設計工作項目? (為何不直接利用安裝在單一操作系統中的套件就好, 為何要使用全雲端  Onshape \xa0或  Fusion 360  ( 兩者比較 )?) \n 我們為何需要使用 SSL 提交推送近端的設計改版內容? (為何不直接在其他協同組員的面前輸入自己的帳號與密碼就好? 只是上上課為何還需要注重資料保全?) \n 我們為何要將電腦輔助設計室中的電腦網路協定設定為純 IPv6? 然後再負責安裝維護多台 IPv6 與 IPv4 雙協定的代理伺服器, 讓使用者可以連線至目前只支援 IPv4 的服務? (為什麼不直接使用 NAT? 讓 64 台電腦透過一個 IPv4 網址對外連線?) \n 我們為何要自行編寫電子郵件寄送程式, 在成績繳交之前通知個別學員? (而不使用制式封閉源的成績公告系統? 或者乾脆將整班課程紙本學期成績單貼在教師研究室門上就好?) \n 電腦輔助設計牽涉如何利用計算機系統相關技術, 以協助產品設計的創建，修改，分析和最佳化. \n 產品設計的創建牽涉利用參數式繪圖套件建立 3D 零件與組立, 而設計修改可以採人工或程式方法進行, 至於本課程所牽涉的設計分析僅止於將機電系統輸入  CoppeliaSim  進行  Kinematic  與  Dynamic  分析模擬. \n 從 3D 零組件的創建並轉進  CoppeliaSim , 若能採程式方法配合參數化尺寸與組態修改, 並且將資料改版過程採用 Git ( Github ) 或  Fossil SCM  進行分散式版次管理, 或者更近一步設法搭建網際系統以提高設計效能, 將可在分組團隊中採取最佳化同步設計. \n 課程使用工具 \n CAD2020 將在  https://kaggle.com ,  https://colab.research.google.com  以及可攜程式系統上編寫與  Flask  網際程式, 目的是利用  Onshape ,  NX 12,  Solidworks  2017 與  AutoDesk Inventor  2019 設計機電資整合系統所需的零組件後, 可結合  Flutter  手機程式與網際  Python Remote API  程式控制  CoppeliaSim  環境中的 虛擬系統 . \n 以下是 CAD2020 課程進行流程: \n W1 學員填寫基本資料 \n W1 告知將利用  Gitter  與  Discourse  進行課程議題討論 \n https://gitter.im/mdecourse/cad2020 \xa0 \n https://forum.eng.nfu.edu.tw \xa0 \n W1 就電腦軟硬體與網路環境的使用進行介紹 \n W2 學員建立  Github ,  Gitlab,   Heroku ,  Onshape  與  Authorea  帳號 \n Ｗ2 學員利用 Github Pages 與 CMSiMDE 建立個人網頁 \n W2 學員學習如何利用 Git 與 Github 維護個人網頁 \n Ｗ3 統整 W1 與 W2 教材內容至各學員個人網頁 \n Ｗ3 完成亂數分組,\xa0 每班分成四組 \n W4 - W6 Flask on Heroku 與 CoppeliaSim Remote API 程式編寫 \n W7-W9 建立  https://github.com/mdecourse/vrep-api-python  所需零組件 \n Ｗ10 - W14 分組電腦輔助設計專案 \n Ｗ15 - W18 分組總結報告 \n', 'tags': '', 'url': 'About.html'}, {'title': '組員名單', 'text': 'group 1  Repository:  40523148  | Site:  40523148 Repository:  40723136  | Site:  40723136 Repository:  40723151  | Site:  40723151 Repository:  40732331  | Site:  40732331 Repository:  40823114  | Site:  40823114 Repository:  40823116  | Site:  40823116 Repository:  40823119  | Site:  40823119 Repository:  40823121  | Site:  40823121 Repository:  40823124  | Site:  40823124 Repository:  40823128  | Site:  40823128 Repository:  40823129  | Site:  40823129 Repository:  40823145  | Site:  40823145 Repository:  40823150  | Site:  40823150 Repository:  40823154  | Site:  40823154 \n \n \n 負責事項: \n 電腦輔助設計室電腦第三磁區系統維護 \n 每週四 19:00 - 21:00 在電腦輔助設計室為操作實習與助教協助回答問題時間 \n', 'tags': '', 'url': '組員名單.html'}, {'title': 'Work', 'text': '', 'tags': '', 'url': 'Work.html'}, {'title': 'W1', 'text': '\xa0可攜系統 \n', 'tags': '', 'url': 'W1.html'}, {'title': '可攜系統', 'text': '先創可攜系統的目錄\xa0 ”CD2020”\xa0 ，在\xa0 CD2020\xa0 的目錄下新增\xa0 ”data” 。 \n Python 3.8.2 到\xa0 https://www.python.org/downloads/release/python-382/ \xa0 搜尋 ”Windows x86-64 executable installer” 並下載 ”Windows x86-64 executable installer” ，下載完後，執行 python-3.8.2-amd64.exe \n PortableGit： https://git-scm.com/download/win \xa0下載 64-bit Git for Windows Portable 安裝在 data 目錄下 \n MSYS2： https://www.msys2.org/ \xa0下載\xa0msys2-x86_64-20190524.exe 並安裝在 data/msys64 的目錄下 \n SciTE： https://www.scintilla.org/SciTEDownload.html \xa0下載 full 64-bit download，解壓縮檔案至 data/wscite432，就是可以直接執行的 Scite.exe 編輯器，若希望以 UtF-8 編碼開啟文件，就必須啟用 Options 下拉式功能表中的 Global Options File（同\xa0SciTEGlobal.properties 檔案）其中的預設值 code.page=0 （為Windows 內定的 Big-5 編碼）修改設定為 code.page=65001，表示使用使 UTF-8 編碼，若要開啟即時更新內容，將load.on.activate=1 前面的井字號拿掉，就會即時更新了（SciTE 須重啟） 修改成 UTF-8 編碼 修改成即時更新 \n 在 data 目錄下新增 ”home” 目錄，開啟SciTE \n start.bat(儲存在CD2020目錄底下) \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n 16 \n 17 \n 18 \n 19 \n 20 \n 21 \n 22 \n 23 \n 24 \n 25 \n 26 \n 27 \n 28 \n 29 \n 30 \n 31 \n 32 \n 33 \n 34 \n 35 \n 36 \n 37 \n \n \n \n @echo off set Disk=y subst %Disk%: "data" %Disk%: set HomePath=%Disk%:\\home set HomeDrive=%Disk%:\\home set Home=%Disk%:\\home set USERPROFILE=%Disk%:\\home REM 將系統 Python 程式的 io 設為 utf-8 set PYTHONIOENCODING="utf-8" set PYTHONPATH=%Disk%:\\Python38\\DLLs;%Disk%:\\Python38\\Lib;%Disk%:\\Python38\\Lib\\site-packages; set PYTHONHOME=%Disk%:\\Python38 REM 設定跟 Python 有關的命令搜尋路徑 set path_python=%Disk%:\\Python38;%Disk%:\\Python38\\Scripts; REM for portable git set path_git=%Disk%:\\Portablegit\\bin; set path_julia=%Disk%:\\julia-1.5.2\\bin; set path_tcc=%Disk%:\\tcc\\;   path=%Disk%:;%path_python%;%path_portablegit%;%path_julia%;%path_tcc%;%path%; start /MIN cmd.exe start /MIN cmd.exe start /MIN cmd.exe start /MIN cmd.exe start /MIN %Disk%:\\wScite\\SciTE.exe start /MIN %Disk%:\\wScite\\SciTE.exe Exit \n \n \n \n \n \n \n \n stop.bat(儲存在CD2020目錄底下) \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n \n \n \n @echo off set Disk=y path=%PATH%; taskkill /IM python.exe /F taskkill /IM pythonw.exe /F taskkill /IM scite.exe /F REM 終止虛擬硬碟與目錄的對應 subst %Disk%: /D REM 關閉 cmd 指令視窗 taskkill /IM cmd.exe /F EXIT \n \n \n \n \n \n MSYS2： https://www.msys2.org/ \xa0 下載 \xa0 msys2-x86_64-20190524.exe \xa0 並執行 選擇cad2020\\data\\msys64的目錄，最後反選 Run MSYS2 64bit now選項，finish 等PortableGit安裝完成重啟可攜，測試。 \n \n \n Tiny C Compiler： https://github.com/TinyCC/tinycc \xa0git clone 整個倉儲到 data 目錄下並命名目錄為 tcc \n 安裝pip： \n 到 https://bootstrap.pypa.io/get-pip.py 頁面，滑鼠右鍵另存新檔到cad2020/data執行 使用pip安裝flask,bs4,xml,elican, mrkdown,flask_cors,leo模組 安裝過程若出現紅字，請重新執行一次模組安裝指令，應該會正常安裝。 \n \xa0 \n CoppeliaSim： https://www.coppeliarobotics.com/winVersions \xa0下載\xa0 CoppeliaSim Edu, Binaries \xa0解壓縮後放到 data 目錄下 \n home/home_mdecourse：存放 ssh 的資料和.gitconfig \n tmp：放 clone 下來的倉儲 \n ShareX： https://getsharex.com/downloads/ \n putty： 老師整理的 putty \xa0 下載 putty 放到data裡面，把之前的ssh和.gitconfig放到home裡面測試是否可以成功用ssh推送資料。 \n \n 基礎可攜系統 下載 有配置Webots 有配置Webots+ CoppeliaSim ( CoppeliaSim V4.0.0 ，含 xelatex) P.S. 可以下載可攜系統的leo都已經升級到6.2.1版本了 \n \n \n \n \n \n', 'tags': '', 'url': '可攜系統.html'}, {'title': 'W2~W5', 'text': '請各分組分別利用 NX, Solidworks, Inventor, Onshape 與 Solvespace 建立下列的所有零件檔案, 並以表格列出各零件的體積. \n Solidworks 零件繪圖練習1.pdf \n 1.11 \n 1.12 \n 1.13 \n 1.14 \n 1.15 \n \n Solidworks 零件繪圖練習2.pdf \n 1-1 \n https://cad.onshape.com/documents/2119878ee8c477eeaefc277d/w/d3039963fb05224313070c57/e/fcf710c8dc1643b8d08fc238 \n 1-2 \n https://cad.onshape.com/documents/82e27ce3af3e523c543a9e07/w/54400297f319f18cc521e6d0/e/8dfb8a54bcc1ec40b85149c9 \n 1-3 \n https://cad.onshape.com/documents/0d08b2e470be2177ff6c9b8e/w/b2f8a1e96f86fa8fab3c92a3/e/94b25e8ca6a5f419bf85caa2 \n 1-4 \n https://cad.onshape.com/documents/64a6de2450cf8c1603068ea1/w/7f97e51ad405c1e587ded053/e/b4cc82c85e13da60fa03ca49 \n 2-1 \n https://cad.onshape.com/documents/2d7e6c176ec31e34b3c466ac/w/f2dcc49895cdc3f9289cb493/e/ffa1bc25576999f69fb9dbc7 \n 2-2 \n https://cad.onshape.com/documents/59b66ed3afe5e426093aeb9c/w/f3ec7357ce0e8f9235fd6e80/e/a5ba358dd47045c4f3564116 \n https://cad.onshape.com/documents/2a5a20be0c3cfae7f049e8a3/w/ec50514334a04f34481527a2/e/bfb6b11e156481c3e059ed33 \n 2-4 \n https://cad.onshape.com/documents/17ff14848aaf46fe9e2161c3/w/66cbaed2d062611301df1432/e/21ed2d8de95b441a7312212b \n 2-5 \n https://cad.onshape.com/documents/531dc6943cecfe7f9e646a87/w/54807b3b0823eaa76f916567/e/c73e8d8773942024539046f0 \n 2-6 \n https://cad.onshape.com/documents/5a23bcb8b686443ed699360a/w/15adb63c7ef7b19666cac5d0/e/31667b6cad50603feb015681 \n 2-7 \n https://cad.onshape.com/documents/99c97608ca8798e368e5f9ac/w/411f525d757cce3f4b75ba3c/e/7909ae3f85185697ee16e80d \n 3-1.C1 \n https://cad.onshape.com/documents/6de556e8146e8115fde3ce93/w/cb9cf7a48d94325b997d2d97/e/a7f5d4340821cbf8f9531052 \n 3-1.C2 \n https://cad.onshape.com/documents/8d00de17e50158b8e784ebac/w/52ae503697399d0551a6dc5d/e/ac339f6b6a107acf9a366674 \n 3-1.C3 \n https://cad.onshape.com/documents/37059595d2ca4e61733f4a0d/w/05577e3dddcede535519b11e/e/7deb5807b2ce4f59ebae461e \n 3-1.C4 \n https://cad.onshape.com/documents/5f06fa956bdd18c7e6ac4727/w/3bd39ac73afdd7e4608597c5/e/76fae6b57e796b133012b953 \n 3-1.C5 \n https://cad.onshape.com/documents/c2836392a427e4d360d04d9f/w/71a927c7206093f8d61f99c6/e/9c9bd1e8c8bbe5b17a3c08fe \n 3-1.C6 \n https://cad.onshape.com/documents/ad73e6308a1dfe4827e2c73c/w/376038317ecfb42b4dc5fed3/e/0f81607c6bf77daa6eb4f0cf \n 3-2 \n https://cad.onshape.com/documents/85168e17968f06c3ee40be55/w/49f9645cc8825cb82a54d978/e/e50d90acefba7ace287dce09 \n 3-3 \n https://cad.onshape.com/documents/64f073f775ec5842496d4094/w/84b545c1a20ecd099fee0b63/e/1d781af81faa93df7daaef6d \n 3-4 \n https://cad.onshape.com/documents/fc556bee55da309dc681a92b/w/1f973e80a6753e6cc8d03887/e/b3975177dc6335fb6f52e8d2 \n 3-5 \n https://cad.onshape.com/documents/a09d808123048ce852c8d450/w/1792db7395848d582aa8a06e/e/eb14074308437e12350bbdb5 \n 3-6 \n https://cad.onshape.com/documents/dc56ef8de9b0d15ec52175ef/w/7c9daa2b09f6ba692c4bb81b/e/cc9e26e1b7a29d16d1d31e54 \n 3-7 \n https://cad.onshape.com/documents/acd8ecdb05674713f546131f/w/79aa733bfa0eb4b8766aeb4a/e/d6f0c99bdf006f8e10bffe4f \n 3-8 \n https://cad.onshape.com/documents/3ff2dfb2d81faab3f6b6ca25/w/2f0c1e1c078cf840c765dece/e/7ef7e5a9d2667c493df9bd6b \n 3-9 \n https://cad.onshape.com/documents/a6ff1c1f057f10af8d05481d/w/f5054448c3ef24202beed97a/e/def8fac69a755f882cc797da \n 3-10 \n https://cad.onshape.com/documents/cc11214baa3d212aa2de5cb4/w/5a4b4c7ca9279085574b80bb/e/bf288c7036d0d56bb9a73af2 \n \n', 'tags': '', 'url': 'W2~W5.html'}, {'title': 'W7', 'text': "tcc \n 1.Proxy修改為:140.130.17.4\xa0 阜號為 3128 \n 下載 http://a.kmol.info:88/ 中的 fall2020_v2.7z \n 或 \n 下載 cad2020_w7_tcc_gnuplot.7z 解壓縮資料夾 \n \n 2.修改start.bat \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n \n \n \n set path_julia=%Disk%:\\julia-1.5.2\\bin; \n set path_tcc=%Disk%:\\tcc\\; \n set path_gnuplot=%Disk%:\\gnuplot\\bin; \n path=%Disk%:;%path_python%;%path_portablegit%;%path_julia%;%path_tcc%;%path_gnuplot%;%path%; \n \n \n \n \n \n \n \n 修改完重開一次 \n \n 3.重啟後輸入指令 tcc(黑窗) \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n 16 \n 17 \n 18 \n 19 \n 20 \n 21 \n 22 \n 23 \n 24 \n 25 \n 26 \n 27 \n 28 \n 29 \n 30 \n 31 \n 32 \n 33 \n 34 \n 35 \n 36 \n 37 \n 38 \n 39 \n 40 \n 41 \n 42 \n 43 \n \n \n \n Tiny C Compiler 0.9.27 - Copyright (C) 2001-2006 Fabrice Bellard \n Usage: tcc [options...] [-o outfile] [-c] infile(s)... \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0 tcc [options...] -run infile [arguments...] \n General options: \n \xa0\xa0 -c\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 compile only - generate an object file \n \xa0\xa0 -o outfile\xa0 set output filename \n \xa0\xa0 -run\xa0\xa0\xa0\xa0\xa0\xa0\xa0 run compiled source \n \xa0\xa0 -fflag\xa0\xa0\xa0\xa0\xa0 set or reset ( with   'no-'   prefix)  'flag'   (see tcc -hh) \n \xa0\xa0 -Wwarning\xa0\xa0 set or reset ( with   'no-'   prefix)  'warning'   (see tcc -hh) \n \xa0\xa0 -w\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 disable all warnings \n \xa0\xa0 -v -vv\xa0\xa0\xa0\xa0\xa0 show version, show search paths or loaded files \n \xa0\xa0 -h -hh\xa0\xa0\xa0\xa0\xa0 show  this , show more help \n \xa0\xa0 -bench\xa0\xa0\xa0\xa0\xa0 show compilation statistics \n \xa0\xa0 -\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 use stdin pipe as infile \n \xa0\xa0 @listfile\xa0\xa0 read arguments from listfile \n Preprocessor options: \n \xa0\xa0 -Idir\xa0\xa0\xa0\xa0\xa0\xa0 add include path  'dir' \n \xa0\xa0 -Dsym[=val] define  'sym'   with   value  'val' \n \xa0\xa0 -Usym\xa0\xa0\xa0\xa0\xa0\xa0 undefine  'sym' \n \xa0\xa0 -E\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 preprocess only \n Linker options: \n \xa0\xa0 -Ldir\xa0\xa0\xa0\xa0\xa0\xa0 add library path  'dir' \n \xa0\xa0 -llib\xa0\xa0\xa0\xa0\xa0\xa0 link  with   dynamic or static library  'lib' \n \xa0\xa0 -r\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 generate (relocatable) object file \n \xa0\xa0 -shared\xa0\xa0\xa0\xa0 generate a shared library/dll \n \xa0\xa0 -rdynamic\xa0\xa0 export all global symbols to dynamic linker \n \xa0\xa0 -soname\xa0\xa0\xa0\xa0 set name  for   shared library to be used at runtime \n \xa0\xa0 -Wl,-opt[=val]\xa0 set linker option (see tcc -hh) \n Debugger options: \n \xa0\xa0 -g\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 generate runtime debug info \n \xa0\xa0 -b\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 compile  with   built- in   memory and bounds checker (implies -g) \n \xa0\xa0 -bt N\xa0\xa0\xa0\xa0\xa0\xa0 show N callers  in   stack traces \n Misc. options: \n \xa0\xa0 -x[c|a|n]\xa0\xa0 specify type of the next infile \n \xa0\xa0 -nostdinc\xa0\xa0  do   not use standard system include paths \n \xa0\xa0 -nostdlib\xa0\xa0  do   not link  with   standard crt and libraries \n \xa0\xa0 -Bdir\xa0\xa0\xa0\xa0\xa0\xa0 set tcc's private include/library dir \n \xa0\xa0 -MD\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 generate dependency file  for   make \n \xa0\xa0 -MF file\xa0\xa0\xa0 specify dependency file name \n \xa0\xa0 -m32/64\xa0\xa0\xa0\xa0 defer to i386/x86_64 cross compiler \n Tools: \n \xa0\xa0 create library\xa0 : tcc -ar [rcsv] lib.a files \n \xa0\xa0 create def file : tcc -impdef lib.dll [-v] [-o lib.def] \n \n \n \n \n \n \n \n 表示啟動命令搜尋路徑已經包含 y:\\tcc 目錄 \n 4.修改 SciTE 編輯器的 cpp.properties, 讓 Tools -> Go 可以呼叫 tcc.exe 類解譯編輯器中副檔名為 .c 的 ANSI C 程式. \n 作法:將滑鼠指向 Options 往下點擊 Open cpp.properties 編輯設定檔案, 並且勾選 View -> Line Number 使編輯器顯示行號, 針對\xa0 476 行之後的設定修改如下: \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n \n \n \n ccopts=-pedantic -Os \n #cc=g++ $(ccopts) -c $(FileNameExt) -o $(FileName).o \n #ccc=gcc $(ccopts) -c $(FileNameExt) -o $(FileName).o \n cc=y:/tcc/tcc.exe -run \n ccc=y:/tcc/tcc.exe -run \n \xa0 \xa0 \n make.command=make \n command.compile.*.c=$(ccc) -std=c99 \n command.build.*.c=$(make.command) \n command.build.*.h=$(make.command) \n command.clean.*.c=$(make.command) clean \n command.clean.*.h=$(make.command) clean \n command.go.*.c=$(cc) $(FileNameExt) \n #command.go.*.c=./$(FileName) \n # To make the Go command both compile (if needed) and execute, use this setting: \n \n \n \n \n \n \n \n", 'tags': '', 'url': 'W7.html'}, {'title': 'W8~W9', 'text': '從 https://github.com/KmolYuan/Pyslvs-UI/releases 下載最新檔案 \n 使用說明 pyslvs使用說明 \n 基本操作: \n 先加入需要的點選好位置案右鍵 \n Add為可動點 Add to [ground]為固定點 \n \n 將要連結的點點選右鍵 \n 按下new link即可加入連桿 \n \n 完成鏈結後進入Inputs頁面 \n 1.在Base points選擇連桿要進行主動的相對運動時的點 \n 2.程式會自動搜尋相對的另一點顯示在Driver points欄位上 \n 3.點選完畢後按向下箭頭 \n 4.即可生成主動件運行動作 \n 按下播放即可轉動 \n \n 此為我測試之連桿圖 \n \n 做動模擬 \n \n \n \n', 'tags': '', 'url': 'W8~W9.html'}, {'title': 'W10~W13', 'text': '學習Coppeliasim基本用法 \n 到官網下載 Coppeliasim 教學版 \n 完成後點入程式取得以下畫面 \n \n 匯入檔案方式 \n \n 必須設定使零件軸向與程式軸向相同以方便操作 \n \n 並得知程式內建電機種類 \n \n \n 進行模擬時可先簡化多餘的零件 \n \n \n', 'tags': '', 'url': 'W10~W13.html'}, {'title': 'W14~W17', 'text': '協助構思設計測試運球軌道 \n \n', 'tags': '', 'url': 'W14~W17.html'}, {'title': 'W18', 'text': '\n 這學期做的所有東西最難的其實是coppeliasim \n 需要協同各個尺寸調整 \n 已完成最後目標 \n 而且裡面一堆專業英文真的有夠麻煩 \n 剩下的東西包括pyslvs以及其他各種的繪圖也是只要用心試就能完成的 \n', 'tags': '', 'url': 'W18.html'}, {'title': 'Problems', 'text': '', 'tags': '', 'url': 'Problems.html'}, {'title': '網頁顯示不出', 'text': '會有網頁錯亂而造成網頁顯示不了的問題 \n 原因:由於是推上倉儲所以在add的時候就應該要在倉儲的目錄下 \n 由時候太急容易忘記從cmsimde的目錄退出 \n 否則會導致錯亂 \n 解決方法:將cmsimde裡文件重新梳理 \n 刪掉add再重新在倉儲目錄推上即可解決 \n', 'tags': '', 'url': '網頁顯示不出.html'}]};